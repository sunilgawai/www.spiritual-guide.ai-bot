// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id])
    userId       String   @db.ObjectId
}

enum Role {
    customer
    admin
}

model User {
    id            String         @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?        @unique
    username      String?        @unique
    emailVerified DateTime?
    image         String?
    role          Role?          @default(customer)
    accounts      Account[]
    sessions      Session[]
    Membership    Membership[]
    UserApiLimit  UserApiLimit[]
}

model VerificationToken {
    identifier String   @id @default(auto()) @map("_id") @db.ObjectId
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model UserApiLimit {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @db.ObjectId
    count     BigInt
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum MembershipPlan {
    base
    premium
}

model Membership {
    id              String         @id @default(auto()) @map("_id") @db.ObjectId
    user            User           @relation(fields: [userId], references: [id])
    userId          String         @db.ObjectId
    stipeCustomerId String
    plan            MembershipPlan @default(base)
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
}
